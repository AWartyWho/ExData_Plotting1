head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(Speed = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
rankhospital <- function(state, outcome, num) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
s <- unique(data[,7])
if (sum(state == s) != 1) {
stop("invalid state")
}
if (!((outcome == "heart attack")|(outcome == "heart failure")|
(outcome == "pneumonia"))) {
stop("invalid outcome")
}
##Return hospital name in that state with lowest 30-day death rate
outcomeCol <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {23}
new_data <- subset(data, State==state)
iso_data <- data.frame(cbind(new_data[,1], new_data[,2], new_data[,outcomeCol]))
iso_data[,3] <- suppressWarnings(as.numeric(iso_data[,3]))
bad <- is.na(iso_data[,3])
good <- iso_data[!bad,]
ordered <- good[order(good[,3], good[,2]),]
if (num == "best") {
num = 1
} else if (num == "worst") {
num = length(iso_data[,3])
}
hosp <- ordered[num, 2]
hosp
}
?file.exists
library("swirl")
packageVersion("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,
| package, ip_id)
arrange(cran2,package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createfile("example.h5")
created = h5createFile("example.h5")
created
install.packages("foreign")
install.packages("jsonlite")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "871f039d7609d5c82c28",secret = "50e2be12a8104e46456ee1f40bbfa777d17cb52c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("sqldf")
library(httr)
html2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 <- content(html2, as="text")
data <- htmlParse(content2, asText=TRUE)
html2
library(XML)
data <- htmlParse(content2, asText=TRUE)
data
?nchar
nchar(data[c(10,20,30,100),])
nchar(data[10,])
xpathSApply(data, "//title", xmlValue)
class(data)
data[10]
library(swirl)
swirl
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran,package)
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum$count[pack_sum$count>679,])
top_counts <- filter(pack_sum$count[pack_sum$count>679])
?filter
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
?
?n
?n_distinct
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
rm(ls)
rm(ls())
ls()
p <- ls()
rm(p)
View(by_package)
?melt
install.packages(reshape2)
install.packages("reshape2")
?ddply
library(plyr)
library(plyr)
?ddply
?ave
?factor
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
reset()
swirl()
submit()
submit()
students3
submit()
?spread
submit()
reset()
swirl()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
install.packages("jpeg")
library(jpeg)
?jpeg
help(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "jeff.jpg", method = "curl")
readJPEG("jeff.jpg")
jeff <- readJPEG("jeff.jpg", native=TRUE)
?quantile
quantile(jeff, probs = 0.3)
quantile(jeff, probs = 0.8)
library(tidyr)
?extract_numeric
?unique
?bind_rows
??bind_row
??bind_rows
?nchar
?substr
?paste
?str_trim
install.packages("lubridate")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tz="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?wwith_tz
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
?lapply
lapply(sampleTimes, weekdays())
lapply(sampleTimes, weekdays)
wd <- lapply(sampleTimes, weekdays)
grep("Monday", wd)
sum(grepl("Monday", wd))
sapply(sampleTimes, as.logical(year = 2007 & weekdays = Monday))
grepl("2007", sampleTimes)
sum(grepl("2007", sampleTimes))
sum(grepl("2012", sampleTimes))
year <- grepl("2012", sampleTimes)
monday <- grepl("Monday", wd)
year & monday
sum(year & monday)
co <- read.csv("co.csv")
?unique
unique <- unique(co)
unique
?write.csv
write.csv(unique, "unique.csv")
ci <- read.csv("ci.csv")
unique <- unique(ci)
write.csv(unique, "unique.csv")
?abline
?lwd
??lwd
install.packages("ggplot2")
install.packages("lattice")
?Devies
?Devices
install.packages("jpeg")
install.packages("svg")
install.packages("png")
install.packages("bmp")
install.packages("tiff")
install.packages("quartz")
quartz()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution$pm25, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(data, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
mpg$model
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
swirl()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par)
length(par())
names(par)
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, months==5)
may <- subset(airquality, Month==5)
points(Wind, Ozone, data=may, col="blue", pch=2)
points(may$Wind, may$Ozone, col="blue", pch=2)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch="8")
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
as.Date(strptime("16/12/2006", "%d %m $Y"))
strptime("16/12/2006", "%d %m $Y")
strptime("16/12/2006", "%d %m %Y")
as.Date(strptime("16/12/2006", "%d %m %Y"))
class("16/12/2006")
strptime("16/12/2006", "%d/%m/%Y")
setwd("COURSERA/exploratory-assignment1")
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
data$Date <- as.Date(strptime(data$Date, "%d/%m/%Y"))
head(data)
req_data <- subset(data, Date == "2007-02-01" | "2007-02-02")
req_data <- subset(data, Date == "2007-02-01" | Date == "2007-02-02")
head(req_data)
hist(req_data$Global_active_power)
req_data$Global_active_power
class(req_data$Global_active_power)
gap <- as.numeric(req_data$Global_active_power)
gap <- as.numeric(as.character(req_data$Global_active_power))
quantile(gap)
hist(gap)
hist(gap, col="red", xlab="Global Active Power (kilowatts)")
hist(gap, col="red", xlab="Global Active Power (kilowatts)",
main="Global Active Power")
row.names(req_data)
